Given an array arr[], return the second largest element from an array. If the second largest element doesn't exist then return -1.

Note: The second largest element should not be equal to the first largest.

Examples:

Input: arr[] = [12, 35, 1, 10, 34, 1]
Output: 34
Explanation: The largest element of the array is 35 and the second largest element is 34.
Input: arr[] = [10, 10]
Output: -1
Explanation: The largest element of the array is 10 and the second largest element does not exist..
Constraints:
2 ≤ arr.size() ≤ 105
1 ≤ arr[i] ≤ 105

Solution- 
//{ Driver Code Starts
// Initial Template for Java
import java.io.*;
import java.util.*;
import java.util.stream.Collectors;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int t = Integer.parseInt(sc.nextLine());
        while (t-- > 0) {
            String[] arr1Str = sc.nextLine().split(" ");
            int[] arr = Arrays.stream(arr1Str).mapToInt(Integer::parseInt).toArray();
            Solution ob = new Solution();
            int ans = ob.getSecondLargest(arr);
            System.out.println(ans);

            System.out.println("~");
        }
    }
}

// } Driver Code Ends


// User function Template for Java

class Solution {
    public int getSecondLargest(int[] arr) {
        // Code Here
        int len=arr.length;
        if(len<2)
         return -1;
        
        int largest=-1;
        int second_largest=-1;
        
        for(int i=0;i<len;i++)
        {
            if(arr[i]>largest)
            {   
                second_largest=largest;
                largest=arr[i];
            }
            
            else if(arr[i]>second_largest && arr[i]!=largest)
            {
                second_largest=arr[i];
            }
            
           
        }
         return second_largest;
    }
}

//Logic-we reach an element-we check if it is greater than the largest or not-if greater than largest it means its the new largest and previous largest is the second largest.If not we check if greater than second_largest and must not not be equal to largest.If greater than second largest then update the second largest.