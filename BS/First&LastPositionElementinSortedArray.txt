Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 


Solution-
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ans = new int[2];
        int mid=0,len=nums.length;
        int l=0,r=len-1;

        while(l<=r)
        {   
            mid=(l+r)/2;
            if(nums[mid]==target)
            {
                int p=mid;
                while(p>=0 && nums[p]==target)
                {
                    ans[0]=p;
                    p--;
                }
                int q=mid;
                while(q<=len-1 && nums[q]==target)
                {
                    ans[1]=q;
                    q++;
                }

                return ans;
            }
            else if(nums[mid]>target)
                r=mid-1;
            else
                l=mid+1;
        }

        ans[0]=-1;
        ans[1]=-1;

        return ans;

    }
}


logic- Used Binary search. Once reached the target element, used loop to travel to first and last index of the target element